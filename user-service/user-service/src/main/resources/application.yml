spring:
  application:
    name: user-service

  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
      - org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration
  data:
    jpa:
      repositories:
        enabled: false

  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: ${JWK_SET_URI}

      client:
        registration:
          keycloak:
            client-id: ${CLIENT_ID}          # <-- el ID de tu cliente en Keycloak
            client-secret: ${CLIENT_SECRET}
            scope: openid,profile,email
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/keycloak"
        provider:
          keycloak:
            issuer-uri: ${ISSUER_URL}

keycloak:
  server-url: ${SERVER_URL}         # o 8080 si ese es tu KC
  realm: ${REALM}
  admin:
    client-id: ${CLIENT_ID}         # <-- debe ser un client CONFIDENTIAL con Service Accounts = ON
    client-secret: ${CLIENT_SECRET}       # <-- secret de ese client
  login:
    client-id: ${CLIENT_ID}       # el client para login (puede ser el mismo u otro)
    client-secret: ${CLIENT_SECRET}  # dejar vacÃ­o si el client es Public
    confidential: true                       # true si tu client requiere secret (Confidential)
  legacy-auth-path: false                   # true solo si tu KC usa /auth (Keycloak viejo)

server:
  port: 8086

eureka:
  client:
    service-url:
      defaultZone: ${DEFAULT_ZONE}
  instance:
    hostname: localhost
    prefer-ip-address: true
    ip-address: 127.0.0.1
    instance-id: ${spring.application.name}:${server.port}